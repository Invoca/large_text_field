#!/usr/bin/groovy
@Library('jenkins-pipeline@v0.4.5')
import com.invoca.docker.*;
pipeline {
  agent {
    kubernetes {
      defaultContainer "ruby"
      yamlFile ".jenkins/ruby_build_pod.yml"
    }
  }

  environment {
    GITHUB_TOKEN = credentials('github_token')
    BUNDLE_GEM__FURY__IO = credentials('gemfury_deploy_token')
  }

  stages {
    stage('Setup') {
      steps {
        updateGitHubStatus('clean-build', 'pending', 'Unit tests.')
        script {
          sh 'bundle install'
          sh 'bundle exec appraisal install'
        }
      }
    }

    stage('Appraisals') {
      parallel {
        stage('Current') {
          environment {
            JUNIT_OUTPUT_DIR = 'test/reports/current'
            TEST_DB = 'db/test.current.sqlite3'
          }

          steps {
            sh 'bundle exec rake db:setup RAILS_ENV=test'
            sh 'bundle exec rake'
          }

          post { always { junit 'test/reports/current/*.xml' } }
        }

        stage('Rails 4') {
          environment {
            JUNIT_OUTPUT_DIR = 'test/reports/rails-4'
            TEST_DB = 'db/test.rails-4.sqlite3'
          }

          steps {
            sh 'bundle exec rake db:setup RAILS_ENV=test'
            sh 'bundle exec appraisal rails-4 rake'
          }

          post { always { junit 'test/reports/rails-4/*.xml' } }
        }

        stage('Rails 5') {
          environment {
            JUNIT_OUTPUT_DIR = 'test/reports/rails-5'
            TEST_DB = 'db/test.rails-5.sqlite3'
          }

          steps {
            sh 'bundle exec rake db:setup RAILS_ENV=test'
            sh 'bundle exec appraisal rails-5 rake'
          }

          post { always { junit 'test/reports/rails-5/*.xml' } }
        }

        stage('Rails 6') {
          environment {
            JUNIT_OUTPUT_DIR = 'test/reports/rails-6'
            TEST_DB = 'db/test.rails-6.sqlite3'
          }

          steps {
            sh 'bundle exec rake db:setup RAILS_ENV=test'
            sh 'bundle exec appraisal rails-6 rake'
          }

          post { always { junit 'test/reports/rails-6/*.xml' } }
        }
      }

      post {
        success { updateGitHubStatus('clean-build', 'success', 'Unit tests.') }
        failure { updateGitHubStatus('clean-build', 'failure', 'Unit tests.') }
      }
    }
  }
}

void updateGitHubStatus(String context, String status, String description) {
  gitHubStatus([
    repoSlug:    'Invoca/large_text_field',
    sha:         env.GIT_COMMIT,
    description: description,
    context:     context,
    targetURL:   env.RUN_DISPLAY_URL,
    token:       env.GITHUB_TOKEN,
    status:      status
  ])
}
